import { useState, useEffect } from 'react'

const SlotGame = ({ currentUser, onNavigateHome, onUpdateBalance }) => {
  // スロットシンボル（マイジャグラー風）
  const symbols = [
    { symbol: '🍒', name: 'チェリー', value: 1, weight: 30 },  // 高確率
    { symbol: '🍋', name: 'レモン', value: 2, weight: 25 },    // 高確率
    { symbol: '🍊', name: 'オレンジ', value: 3, weight: 20 }, // 中確率
    { symbol: '🍇', name: 'ブドウ', value: 4, weight: 15 },   // 中確率
    { symbol: '🔔', name: 'ベル', value: 5, weight: 8 },      // 低確率
    { symbol: '⭐', name: 'スター', value: 10, weight: 1.5 }, // 超低確率
    { symbol: '💎', name: 'ダイヤ', value: 20, weight: 0.4 }, // 激レア
    { symbol: '7️⃣', name: 'ラッキーセブン', value: 77, weight: 0.1 } // 超激レア
  ]

  // 重み付きランダム選択
  const getWeightedRandomSymbol = () => {
    const totalWeight = symbols.reduce((sum, symbol) => sum + symbol.weight, 0)
    let random = Math.random() * totalWeight
    
    for (let i = 0; i < symbols.length; i++) {
      random -= symbols[i].weight
      if (random <= 0) {
        return i
      }
    }
    return 0 // フォールバック
  }

  // ゲーム状態
  const [reels, setReels] = useState([0, 0, 0])
  const [spinning, setSpinning] = useState(false)
  const [betAmount, setBetAmount] = useState(10)
  const [message, setMessage] = useState('')
  const [lastWin, setLastWin] = useState(0)
  const [gameHistory, setGameHistory] = useState([])
  
  // 連続スピン機能
  const [autoSpin, setAutoSpin] = useState(false)
  const [autoSpinCount, setAutoSpinCount] = useState(0)
  const [autoSpinRemaining, setAutoSpinRemaining] = useState(0)

  // ペイアウトテーブル（マイジャグラー風）
  const getPayoutMultiplier = (reel1, reel2, reel3) => {
    const symbol1 = symbols[reel1]
    const symbol2 = symbols[reel2]
    const symbol3 = symbols[reel3]

    // 3つ同じシンボルのみ当たり（マイジャグラー仕様）
    if (reel1 === reel2 && reel2 === reel3) {
      switch (symbol1.name) {
        case 'ラッキーセブン': return 77  // 7が3つ揃い
        case 'ダイヤ': return 20         // ダイヤ3つ
        case 'スター': return 15         // スター3つ
        case 'ベル': return 10           // ベル3つ
        case 'ブドウ': return 8          // ブドウ3つ
        case 'オレンジ': return 6        // オレンジ3つ
        case 'レモン': return 4          // レモン3つ
        case 'チェリー': return 2        // チェリー3つ
        default: return 0
      }
    }

    // チェリーの特別ルール（左リールにチェリーがあれば小当たり）
    if (reel1 === 0) { // チェリーは0番目
      if (reel2 === 0) { // 左2つがチェリー
        return 4
      } else { // 左1つだけチェリー
        return 2
      }
    }

    // ベルの特別ルール（どこか2つがベルなら小当たり）
    const bellCount = [reel1, reel2, reel3].filter(reel => symbols[reel].name === 'ベル').length
    if (bellCount >= 2) {
      return 3
    }

    return 0 // ハズレ
  }

  // スピン実行（連続スピン対応）
  const spin = () => {
    if (betAmount > currentUser.balance) {
      setMessage('残高が不足しています。')
      if (autoSpin) {
        stopAutoSpin()
      }
      return
    }

    setSpinning(true)
    setMessage(autoSpin ? `自動スピン中... (残り${autoSpinRemaining}回)` : 'スピン中...')
    setLastWin(0)

    // 残高から賭け金を引く
    onUpdateBalance(currentUser.balance - betAmount)

    // 自動スピンのカウント減少
    if (autoSpin && autoSpinRemaining > 0) {
      setAutoSpinRemaining(prev => prev - 1)
    }

    // アニメーション効果のためのランダム回転（自動スピン時は短縮）
    const spinDuration = autoSpin ? 1000 : 2000 + Math.random() * 1000
    const spinInterval = 100 // 100msごとに更新

    let elapsed = 0
    const spinTimer = setInterval(() => {
      setReels([
        Math.floor(Math.random() * symbols.length),
        Math.floor(Math.random() * symbols.length),
        Math.floor(Math.random() * symbols.length)
      ])

      elapsed += spinInterval
      if (elapsed >= spinDuration) {
        clearInterval(spinTimer)
        
        // 最終結果を決定（重み付きランダム）
        const finalReels = [
          getWeightedRandomSymbol(),
          getWeightedRandomSymbol(),
          getWeightedRandomSymbol()
        ]
        
        setReels(finalReels)
        setSpinning(false)
        
        // 結果判定
        setTimeout(() => {
          checkResult(finalReels)
        }, 500)
      }
    }, spinInterval)
  }

  // 結果判定
  const checkResult = (finalReels) => {
    const multiplier = getPayoutMultiplier(finalReels[0], finalReels[1], finalReels[2])
    const winAmount = betAmount * multiplier

    if (multiplier > 0) {
      setLastWin(winAmount)
      onUpdateBalance(currentUser.balance + winAmount)
      
      if (multiplier >= 77) {
        setMessage(`🎉 ラッキーセブン！ ${winAmount.toLocaleString()}コイン獲得！ 🎉`)
      } else if (multiplier >= 20) {
        setMessage(`💎 大当たり！ ${winAmount.toLocaleString()}コイン獲得！ 💎`)
      } else if (multiplier >= 10) {
        setMessage(`⭐ 当たり！ ${winAmount.toLocaleString()}コイン獲得！ ⭐`)
      } else {
        setMessage(`� 小当たり！ ${winAmount.toLocaleString()}コイン獲得！`)
      }
    } else {
      setMessage('残念！もう一度挑戦してください。')
    }

    // ゲーム履歴に追加
    const newHistory = {
      reels: finalReels,
      bet: betAmount,
      win: winAmount,
      multiplier: multiplier,
      timestamp: new Date().toLocaleTimeString()
    }
    setGameHistory(prev => [newHistory, ...prev.slice(0, 4)]) // 最新5件まで保持

    // 自動スピン継続チェック
    if (autoSpin && autoSpinRemaining > 0) {
      setTimeout(() => {
        spin()
      }, 1000) // 1秒後に次のスピン
    } else if (autoSpin && autoSpinRemaining <= 0) {
      stopAutoSpin()
    }
  }

  // 自動スピン開始
  const startAutoSpin = (count) => {
    setAutoSpin(true)
    setAutoSpinCount(count)
    setAutoSpinRemaining(count)
    spin()
  }

  // 自動スピン停止
  const stopAutoSpin = () => {
    setAutoSpin(false)
    setAutoSpinCount(0)
    setAutoSpinRemaining(0)
    setMessage('自動スピンを停止しました。')
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-purple-900 via-pink-900 to-red-900 p-4">
      <div className="max-w-4xl mx-auto">
        {/* ヘッダー */}
        <div className="flex justify-between items-center mb-6">
          <button
            onClick={() => onNavigateHome()}
            className="bg-gray-600 hover:bg-gray-700 text-white px-4 py-2 rounded-lg transition-colors duration-300"
          >
            ← ホームに戻る
          </button>
          <h1 className="text-4xl font-bold text-white">🎰 スロット 🎰</h1>
          <div className="text-white text-right">
            <div className="text-lg font-bold">👤 {currentUser.username}</div>
            <div className="text-yellow-300 font-bold">💰 {currentUser.balance.toLocaleString()}コイン</div>
          </div>
        </div>

        {/* スロットマシン */}
        <div className="bg-gradient-to-b from-yellow-400 to-yellow-600 rounded-lg p-8 mb-6 shadow-2xl">
          <div className="bg-black rounded-lg p-6 mb-6">
            <div className="flex justify-center space-x-4">
              {reels.map((reelIndex, index) => (
                <div key={index} className={`w-24 h-24 bg-white rounded-lg flex items-center justify-center text-4xl font-bold border-4 border-gray-300 ${
                  spinning ? 'animate-pulse' : ''
                }`}>
                  {symbols[reelIndex].symbol}
                </div>
              ))}
            </div>
          </div>

          {/* ベットコントロール */}
          <div className="bg-white/20 backdrop-blur-md rounded-lg p-4 mb-4">
            <div className="flex items-center justify-center space-x-4 mb-4">
              <label className="text-white font-medium">賭け金:</label>
              <select
                value={betAmount}
                onChange={(e) => setBetAmount(parseInt(e.target.value))}
                disabled={spinning || autoSpin}
                className="px-3 py-2 rounded-lg bg-white/20 border border-white/30 text-white"
              >
                <option value={5}>5コイン</option>
                <option value={10}>10コイン</option>
                <option value={25}>25コイン</option>
                <option value={50}>50コイン</option>
                <option value={100}>100コイン</option>
              </select>
            </div>

            <div className="flex justify-center space-x-4">
              <button
                onClick={spin}
                disabled={spinning || autoSpin || betAmount > currentUser.balance}
                className={`px-8 py-3 rounded-lg font-bold text-white transition-all duration-300 ${
                  spinning || autoSpin || betAmount > currentUser.balance
                    ? 'bg-gray-500 cursor-not-allowed'
                    : 'bg-red-600 hover:bg-red-700 hover:scale-105'
                }`}
              >
                {spinning ? 'スピン中...' : 'スピン'}
              </button>

              {!autoSpin ? (
                <div className="flex space-x-2">
                  <button
                    onClick={() => startAutoSpin(10)}
                    disabled={spinning || betAmount > currentUser.balance}
                    className="px-4 py-3 bg-blue-600 hover:bg-blue-700 text-white rounded-lg font-bold transition-colors duration-300"
                  >
                    自動10回
                  </button>
                  <button
                    onClick={() => startAutoSpin(25)}
                    disabled={spinning || betAmount > currentUser.balance}
                    className="px-4 py-3 bg-blue-600 hover:bg-blue-700 text-white rounded-lg font-bold transition-colors duration-300"
                  >
                    自動25回
                  </button>
                  <button
                    onClick={() => startAutoSpin(50)}
                    disabled={spinning || betAmount > currentUser.balance}
                    className="px-4 py-3 bg-blue-600 hover:bg-blue-700 text-white rounded-lg font-bold transition-colors duration-300"
                  >
                    自動50回
                  </button>
                </div>
              ) : (
                <button
                  onClick={stopAutoSpin}
                  className="px-6 py-3 bg-red-600 hover:bg-red-700 text-white rounded-lg font-bold"
                >
                  停止 ({autoSpinRemaining}回残り)
                </button>
              )}
                  <button
                    onClick={() => startAutoPlay(10)}
                    disabled={spinning || betAmount > currentUser.balance}
                    className="px-4 py-3 bg-blue-600 hover:bg-blue-700 text-white rounded-lg font-bold transition-colors duration-300"
                  >
                    オート10回
                  </button>
                  <button
                    onClick={() => startAutoPlay(25)}
                    disabled={spinning || betAmount > currentUser.balance}
                    className="px-4 py-3 bg-blue-600 hover:bg-blue-700 text-white rounded-lg font-bold transition-colors duration-300"
                  >
                    オート25回
                  </button>
                </div>
              ) : (
                <button
                  onClick={stopAutoSpin}
                  className="px-6 py-3 bg-red-600 hover:bg-red-700 text-white rounded-lg font-bold"
                >
                  停止 ({autoSpinRemaining}回残り)
                </button>
              )}
            </div>
          </div>

          {/* 最後の勝利金 */}
          {lastWin > 0 && (
            <div className="bg-green-500 text-white text-center py-2 rounded-lg mb-4">
              <span className="text-xl font-bold">🎉 {lastWin.toLocaleString()}コイン獲得！ 🎉</span>
            </div>
          )}
        </div>

        {/* メッセージエリア */}
        {message && (
          <div className="bg-white/10 backdrop-blur-md rounded-lg p-4 mb-6">
            <p className="text-white text-center text-lg font-bold">{message}</p>
          </div>
        )}

        {/* ペイアウトテーブル */}
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
          <div className="bg-white/10 backdrop-blur-md rounded-lg p-4">
            <h3 className="text-white font-bold mb-4 text-center">ペイアウトテーブル</h3>
            <div className="space-y-2 text-sm">
              <div className="text-white font-bold border-b border-white/30 pb-2">3つ揃い</div>
              <div className="flex justify-between text-white">
                <span>7️⃣ ラッキーセブン</span>
                <span className="text-yellow-300 font-bold">77倍</span>
              </div>
              <div className="flex justify-between text-white">
                <span>💎 ダイヤ</span>
                <span className="text-purple-300 font-bold">20倍</span>
              </div>
              <div className="flex justify-between text-white">
                <span>⭐ スター</span>
                <span className="text-blue-300">15倍</span>
              </div>
              <div className="flex justify-between text-white">
                <span>🔔 ベル</span>
                <span>10倍</span>
              </div>
              <div className="flex justify-between text-white">
                <span>🍇 ブドウ</span>
                <span>8倍</span>
              </div>
              <div className="flex justify-between text-white">
                <span>🍊 オレンジ</span>
                <span>6倍</span>
              </div>
              <div className="flex justify-between text-white">
                <span>🍋 レモン</span>
                <span>4倍</span>
              </div>
              <div className="flex justify-between text-white">
                <span>🍒 チェリー</span>
                <span>2倍</span>
              </div>
              
              <div className="border-t border-white/30 pt-2 mt-2">
                <div className="text-white font-bold">特別ルール</div>
                <div className="flex justify-between text-white text-xs">
                  <span>🍒 左リール1個</span>
                  <span>2倍</span>
                </div>
                <div className="flex justify-between text-white text-xs">
                  <span>🍒 左リール2個</span>
                  <span>4倍</span>
                </div>
                <div className="flex justify-between text-white text-xs">
                  <span>🔔 ベル2個以上</span>
                  <span>3倍</span>
                </div>
              </div>
            </div>
          </div>

          {/* ゲーム履歴 */}
          <div className="bg-white/10 backdrop-blur-md rounded-lg p-4">
            <h3 className="text-white font-bold mb-4 text-center">最近のゲーム</h3>
            <div className="space-y-2 text-sm">
              {gameHistory.length === 0 ? (
                <p className="text-gray-300 text-center">まだゲームをプレイしていません</p>
              ) : (
                gameHistory.map((game, index) => (
                  <div key={index} className="bg-white/5 rounded p-2">
                    <div className="flex justify-between items-center">
                      <div className="flex space-x-1">
                        {game.reels.map((reelIndex, i) => (
                          <span key={i} className="text-lg">{symbols[reelIndex].symbol}</span>
                        ))}
                      </div>
                      <div className="text-right">
                        <div className={`font-bold ${game.win > 0 ? 'text-green-300' : 'text-red-300'}`}>
                          {game.win > 0 ? `+${game.win}` : `-${game.bet}`}
                        </div>
                        <div className="text-xs text-gray-300">{game.timestamp}</div>
                      </div>
                    </div>
                  </div>
                ))
              )}
            </div>
          </div>
        </div>

        {/* ルール説明 */}
        <div className="bg-white/5 backdrop-blur-md rounded-lg p-4">
          <h4 className="text-white font-bold mb-2">ゲームルール:</h4>
          <p className="text-gray-300 text-sm">
            3つのリールを回転させ、同じシンボルを揃えてコインを獲得しましょう。
            3つ揃いが最高配当、2つ揃いや特別な組み合わせでも配当があります。
            オートプレイ機能で連続プレイも可能です。
          </p>
        </div>
      </div>
    </div>
  )
}

export default SlotGame

